#!/usr/bin/env python3
# test_extraction.py
# Script para probar la extracci√≥n de entidades y relaciones

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.llm import extract_entities_relations, test_extraction
import json

def test_with_different_texts():
    """
    Prueba la extracci√≥n con diferentes tipos de texto.
    """
    test_texts = [
        "Juan P√©rez trabaja en Microsoft Espa√±a como ingeniero de software.",
        "La empresa Apple fue fundada por Steve Jobs en Cupertino, California.",
        "El Real Madrid gan√≥ la Champions League en 2022 bajo la direcci√≥n de Carlo Ancelotti.",
        "OpenAI desarroll√≥ ChatGPT, un modelo de lenguaje basado en GPT-4.",
        "Mar√≠a Garc√≠a estudi√≥ en la Universidad Complutense de Madrid y ahora vive en Barcelona."
    ]
    
    print("üß™ INICIANDO PRUEBAS DE EXTRACCI√ìN DE ENTIDADES")
    print("=" * 60)
    
    for i, text in enumerate(test_texts, 1):
        print(f"\nüìù PRUEBA {i}:")
        print(f"Texto: {text}")
        print("-" * 40)
        
        try:
            result = extract_entities_relations(text)
            
            print(f"‚úÖ Entidades encontradas: {len(result.get('entities', []))}")
            for entity in result.get('entities', []):
                print(f"   - {entity.get('text', 'N/A')} ({entity.get('type', 'N/A')})")
            
            print(f"‚úÖ Relaciones encontradas: {len(result.get('relations', []))}")
            for relation in result.get('relations', []):
                print(f"   - {relation.get('source_id', 'N/A')} -> {relation.get('target_id', 'N/A')} ({relation.get('type', 'N/A')})")
            
        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ PRUEBAS COMPLETADAS")

def test_json_parsing():
    """
    Prueba espec√≠fica para el parsing de JSON.
    """
    from core.llm import extract_json_from_text, validate_and_fix_json_structure
    
    print("\nüß™ PROBANDO PARSING DE JSON")
    print("-" * 40)
    
    # Casos de prueba para JSON
    test_cases = [
        '{"entities": [{"id": "test", "type": "Person", "text": "Test"}], "relations": []}',
        'Aqu√≠ est√° el JSON: {"entities": [], "relations": []}',
        '```json\n{"entities": [{"id": "e1", "text": "Entity"}], "relations": []}\n```',
        'La respuesta es:\n{\n  "entities": [],\n  "relations": []\n}',
        '{"entities": [{"id": "malformed"'  # JSON malformado
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nCaso {i}: {case[:50]}...")
        try:
            result = extract_json_from_text(case)
            validated = validate_and_fix_json_structure(result)
            print(f"‚úÖ Extra√≠do: {len(validated['entities'])} entidades, {len(validated['relations'])} relaciones")
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    # Verificar variables de entorno
    from dotenv import load_dotenv
    load_dotenv()
    
    openai_key = os.getenv("OPENAI_API_KEY")
    claude_key = os.getenv("ANTHROPIC_API_KEY")
    
    print("üîß VERIFICACI√ìN DE CONFIGURACI√ìN:")
    print(f"OpenAI API Key: {'‚úÖ Configurada' if openai_key else '‚ùå Faltante'}")
    print(f"Claude API Key: {'‚úÖ Configurada' if claude_key else '‚ùå Faltante'}")
    
    if not openai_key and not claude_key:
        print("‚ùå No hay claves API configuradas. Configura al menos una en tu archivo .env")
        sys.exit(1)
    
    # Ejecutar pruebas
    test_json_parsing()
    test_with_different_texts()